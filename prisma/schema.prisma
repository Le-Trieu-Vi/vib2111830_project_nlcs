// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid()) @db.VarChar(36)
  fullname  String?   @db.VarChar(100)
  username  String    @unique @db.VarChar(100)
  password  String    @db.VarChar(100)
  address   String?   @db.VarChar(100)
  phone     String?   @db.VarChar(10)
  role      String    @default("staff") @db.VarChar(100)
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  orders    Order[]

  @@map("users")
}

model Category {
  id        String    @id @default(uuid()) @db.VarChar(36)
  name      String    @unique @db.VarChar(100)
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  dishs     Dish[]

  @@map("categories")
}

model Dish {
  id          String        @id @default(uuid()) @db.VarChar(36)
  name        String        @db.VarChar(100)
  price       Int         @db.Int

  image       String        @db.VarChar(100)
  description String        @db.Text
  createdAt   DateTime      @default(now()) @map("created_at")
  deletedAt   DateTime?     @map("deleted_at")
  OrderDetail OrderDetail[]
  Price       Price[]

  category    Category      @relation(fields: [categoryId], references: [id])
  categoryId  String        @db.VarChar(36)

  @@map("dishs")
}

model Price {
  dish    Dish   @relation(fields: [dishId], references: [id])
  dishId  String @db.VarChar(36)
  price   Int
  updated_at DateTime @default(now()) @map("updated_at")
  
  @@id([dishId])
}

model Order {
  id          String        @id @default(uuid()) @db.VarChar(36)
  total       Float         @db.Float
  status      String        @db.VarChar(100)
  createdAt   DateTime      @default(now()) @map("created_at")
  deletedAt   DateTime?     @map("deleted_at")
  OrderDetail OrderDetail[]

  user        User          @relation(fields: [userId], references: [id])
  userId      String        @db.VarChar(36)

  table       Table         @relation(fields: [tableId], references: [id])
  tableId     String        @db.VarChar(36)

  @@map("orders")
}

model Table {
  id        String    @id @default(uuid()) @db.VarChar(36)
  number    String    @db.VarChar(100)
  status    String    @db.VarChar(100)
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  orders    Order[]

  @@map("tables")
}

model OrderDetail {
  order    Order  @relation(fields: [orderId], references: [id])
  orderId  String @db.VarChar(36)

  dish     Dish   @relation(fields: [dishId], references: [id])
  dishId   String @db.VarChar(36)

  quantity Int

  @@id([orderId, dishId])
}
